import TelegramBot from 'node-telegram-bot-api';
import { config } from '../config';
import { processDocument } from './mistralService';
import { ProcessingResult } from '../types/types';
import path from 'path';
import fs from 'fs';
import * as XLSX from 'xlsx';

let bot: TelegramBot;

async function downloadFile(filePath: string, destination: string): Promise<void> {
	console.log(`Downloading file from ${filePath} to ${destination}`);
	const response = await fetch(`https://api.telegram.org/file/bot${config.telegram.token}/${filePath}`);
	const buffer = await response.arrayBuffer();
	fs.writeFileSync(destination, Buffer.from(buffer));
	console.log('File downloaded successfully');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö ParsedDocument
function createExcelFile(data: any, filePath: string): void {
	try {
		// –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
		const workbook = XLSX.utils.book_new();

		// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
		const sheetData: any[][] = [];

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
		sheetData.push(['–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–ö–£–ú–ï–ù–¢–ï']);
		sheetData.push([]);

		// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		sheetData.push(['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞', data.invoice_number || '']);
		sheetData.push(['–î–∞—Ç–∞', data.invoice_date || '']);
		sheetData.push(['–ï–î–†–ü–û–£', data.edrpou || '']);
		sheetData.push(['–ò–ü–ù', data.ipn || '']);
		sheetData.push(['–ü–æ—Å—Ç–∞–≤—â–∏–∫', data.supplier || '']);
		sheetData.push(['–¶–µ–Ω—ã —Å –ù–î–°', data.isPriceWithPdv ? '–î–∞' : '–ù–µ—Ç']);

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
		sheetData.push([]);
		sheetData.push([]);

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤
		sheetData.push(['–°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í']);
		sheetData.push([]);

		// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
		const itemsHeaders = ['‚Ññ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ï–¥. –∏–∑–º.', '–¶–µ–Ω–∞ –±–µ–∑ –ù–î–°', '–¶–µ–Ω–∞ —Å –ù–î–°', '–°—É–º–º–∞ –±–µ–∑ –ù–î–°', '–°—É–º–º–∞ —Å –ù–î–°'];
		sheetData.push(itemsHeaders);

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
		if (data.items && data.items.length > 0) {
			data.items.forEach((item: any, index: number) => {
				sheetData.push([
					index + 1, // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
					item.name || '',
					item.article || '',
					item.quantity || 0,
					item.unit || '',
					item.price_no_pdv || 0,
					item.price_with_pdv || 0,
					item.total_no_pdv || 0,
					item.total_with_pdv || 0,
				]);
			});
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
		sheetData.push([]);

		// –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –≤–Ω–∏–∑—É
		sheetData.push(['', '', '', '', '', '', '–ò–¢–û–ì–û:', data.total_no_pdv || 0, data.total_with_pdv || 0]);
		sheetData.push(['', '', '', '', '', '', '–ù–î–°:', data.total_pdv || 0, '']);

		// –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
		const sheet = XLSX.utils.aoa_to_sheet(sheetData);

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ (—à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤)
		const colWidths = [
			{ wch: 5 }, // ‚Ññ
			{ wch: 40 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
			{ wch: 15 }, // –ê—Ä—Ç–∏–∫—É–ª
			{ wch: 10 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
			{ wch: 10 }, // –ï–¥. –∏–∑–º.
			{ wch: 12 }, // –¶–µ–Ω–∞ –±–µ–∑ –ù–î–°
			{ wch: 12 }, // –¶–µ–Ω–∞ —Å –ù–î–°
			{ wch: 12 }, // –°—É–º–º–∞ –±–µ–∑ –ù–î–°
			{ wch: 12 }, // –°—É–º–º–∞ —Å –ù–î–°
		];

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
		sheet['!cols'] = colWidths;

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
		if (!sheet['!merges']) sheet['!merges'] = [];
		sheet['!merges'].push(
			{ s: { r: 0, c: 0 }, e: { r: 0, c: 8 } }, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
			{ s: { r: 8, c: 0 }, e: { r: 8, c: 8 } }, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
		);

		// –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
		XLSX.utils.book_append_sheet(workbook, sheet, '–î–æ–∫—É–º–µ–Ω—Ç');

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
		XLSX.writeFile(workbook, filePath);
		console.log(`Excel file created: ${filePath}`);
	} catch (error) {
		console.error(`Error creating Excel file: ${error instanceof Error ? error.message : 'Unknown error'}`);
		throw new Error('Failed to create Excel file');
	}
}

async function sendProcessingResult(chatId: number, result: ProcessingResult, originalFileName: string): Promise<void> {
	if (result.success && result.data) {
		// –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
		const supplier = result.data.supplier ? result.data.supplier.replace(/[^\w\s]/gi, '_') : 'unknown';
		const baseName = `${path.parse(originalFileName).name}_${supplier}_${Date.now()}`;
		const jsonFileName = `${baseName}.json`;
		const xlsxFileName = `${baseName}.xlsx`;
		const jsonFilePath = path.join(config.paths.uploads, jsonFileName);
		const xlsxFilePath = path.join(config.paths.uploads, xlsxFileName);

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª
		fs.writeFileSync(jsonFilePath, JSON.stringify(result.data, null, 2));

		// –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
		createExcelFile(result.data, xlsxFilePath);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
		const messageSummary =
			`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
			`üìã –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${result.data.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
			`üìÖ –î–∞—Ç–∞: ${result.data.invoice_date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
			`üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${result.data.items?.length || 0}` +
			`\n\nüîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ JSON –∏ Excel` +
			`\n\n JSON: ${JSON.stringify(result.data, null, 2)}`;

		await bot.sendMessage(chatId, messageSummary);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Ñ–∞–π–ª
		await bot.sendDocument(chatId, jsonFilePath, {
			caption: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON',
		});

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
		await bot.sendDocument(chatId, xlsxFilePath, {
			caption: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel',
		});

		// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
		fs.unlinkSync(jsonFilePath);
		fs.unlinkSync(xlsxFilePath);
		console.log(`Successfully processed document for chat ${chatId}`);
	} else {
		const errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${result.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
		await bot.sendMessage(chatId, errorMessage);
		console.error(`Error processing document for chat ${chatId}: ${result.error}`);
	}
}

function setupHandlers(): void {
	bot.onText(/\/start/, (msg) => {
		const chatId = msg.chat.id;
		bot.sendMessage(chatId, 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
		console.log(`New user started bot: ${chatId}`);
	});

	bot.on('document', async (msg) => {
		const chatId = msg.chat.id;
		const fileId = msg.document?.file_id;

		if (!fileId || !msg.document) {
			bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.');
			console.warn(`Invalid document received from chat ${chatId}`);
			return;
		}

		try {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
			const statusMessage = await bot.sendMessage(chatId, 'üì• –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');

			const file = await bot.getFile(fileId);
			const filePath = path.join(config.paths.uploads, msg.document.file_name || 'document');

			if (!file.file_path) {
				throw new Error('File path not found');
			}

			console.log(`Processing document from chat ${chatId}: ${msg.document.file_name}`);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
			await bot.editMessageText('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Download file
			await downloadFile(file.file_path, filePath);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞
			await bot.editMessageText('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Process document with telegramFilePath
			const result = await processDocument(filePath, file.file_path);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–æ
			await bot.editMessageText('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Send result
			await sendProcessingResult(chatId, result, msg.document.file_name || 'document');

			// Clean up
			fs.unlinkSync(filePath);
			console.log(`Cleaned up file: ${filePath}`);
		} catch (error) {
			const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
			bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			console.error(`Error processing document from chat ${chatId}: ${errorMessage}`);
		}
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	bot.on('photo', async (msg) => {
		const chatId = msg.chat.id;
		const photos = msg.photo;

		if (!photos || photos.length === 0) {
			bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.');
			console.warn(`Invalid photo received from chat ${chatId}`);
			return;
		}

		try {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
			const statusMessage = await bot.sendMessage(chatId, 'üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');

			// –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
			const fileId = photos[photos.length - 1].file_id;
			const file = await bot.getFile(fileId);

			if (!file.file_path) {
				throw new Error('File path not found');
			}

			const fileName = `photo_${Date.now()}.jpg`;
			const filePath = path.join(config.paths.uploads, fileName);

			console.log(`Processing photo from chat ${chatId}`);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
			await bot.editMessageText('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ...', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Download file
			await downloadFile(file.file_path, filePath);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - OCR
			await bot.editMessageText('üëÅÔ∏è –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Process photo with telegramFilePath
			const result = await processDocument(filePath, file.file_path);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–æ
			await bot.editMessageText('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Send result
			await sendProcessingResult(chatId, result, fileName);

			// Clean up
			fs.unlinkSync(filePath);
			console.log(`Cleaned up file: ${filePath}`);
		} catch (error) {
			const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
			bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			console.error(`Error processing photo from chat ${chatId}: ${errorMessage}`);
		}
	});
}

export function startBot(): void {
	bot = new TelegramBot(config.telegram.token, { polling: true });
	setupHandlers();
	console.log('Telegram bot started');
}
