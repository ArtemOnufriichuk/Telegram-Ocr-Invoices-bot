import TelegramBot from 'node-telegram-bot-api';
import { config } from '../config';
import { processDocumentWithFlexibleExtraction } from './claudeService';
import { ProcessingResult } from '../types/types';
import path from 'path';
import fs from 'fs';
import * as XLSX from 'xlsx';
import process from 'process';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
let bot: TelegramBot;
let isRunning = false;
let restartAttempts = 0;
const MAX_RESTART_ATTEMPTS = 5;
const RESTART_COOLDOWN = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
const RESET_ATTEMPTS_AFTER = 60000 * 5; // –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã

async function downloadFile(filePath: string, destination: string): Promise<void> {
	console.log(`Downloading file from ${filePath} to ${destination}`);
	const response = await fetch(`https://api.telegram.org/file/bot${config.telegram.token}/${filePath}`);
	const buffer = await response.arrayBuffer();
	fs.writeFileSync(destination, Buffer.from(buffer));
	console.log('File downloaded successfully');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö ParsedDocument
function createExcelFile(data: any, filePath: string): void {
	try {
		// –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
		const workbook = XLSX.utils.book_new();

		// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
		const sheetData: any[][] = [];

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
		sheetData.push(['–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–ö–£–ú–ï–ù–¢–ï']);
		sheetData.push([]);

		// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		sheetData.push(['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞', data.invoice_number || '']);
		sheetData.push(['–î–∞—Ç–∞', data.invoice_date || '']);
		sheetData.push(['–ï–î–†–ü–û–£', data.edrpou || '']);
		sheetData.push(['–ò–ü–ù', data.ipn || '']);
		sheetData.push(['–ü–æ—Å—Ç–∞–≤—â–∏–∫', data.supplier || '']);
		sheetData.push(['–¶–µ–Ω—ã —Å –ù–î–°', data.isPriceWithPdv ? '–î–∞' : '–ù–µ—Ç']);

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
		sheetData.push([]);
		sheetData.push([]);

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤
		sheetData.push(['–°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í']);
		sheetData.push([]);

		// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
		const itemsHeaders = ['‚Ññ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ï–¥. –∏–∑–º.', '–¶–µ–Ω–∞ –±–µ–∑ –ù–î–°', '–¶–µ–Ω–∞ —Å –ù–î–°', '–°—É–º–º–∞ –±–µ–∑ –ù–î–°', '–°—É–º–º–∞ —Å –ù–î–°'];
		sheetData.push(itemsHeaders);

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
		if (data.items && data.items.length > 0) {
			data.items.forEach((item: any, index: number) => {
				sheetData.push([
					index + 1, // –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
					item.name || '',
					item.article || '',
					item.quantity || 0,
					item.unit || '',
					item.price_no_pdv || 0,
					item.price_with_pdv || 0,
					item.total_no_pdv || 0,
					item.total_with_pdv || 0,
				]);
			});
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
		sheetData.push([]);

		// –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –≤–Ω–∏–∑—É
		sheetData.push(['', '', '', '', '', '', '–ò–¢–û–ì–û:', data.total_no_pdv || 0, data.total_with_pdv || 0]);
		sheetData.push(['', '', '', '', '', '', '–ù–î–°:', data.total_pdv || 0, '']);

		// –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
		const sheet = XLSX.utils.aoa_to_sheet(sheetData);

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ (—à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤)
		const colWidths = [
			{ wch: 5 }, // ‚Ññ
			{ wch: 40 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
			{ wch: 15 }, // –ê—Ä—Ç–∏–∫—É–ª
			{ wch: 10 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
			{ wch: 10 }, // –ï–¥. –∏–∑–º.
			{ wch: 12 }, // –¶–µ–Ω–∞ –±–µ–∑ –ù–î–°
			{ wch: 12 }, // –¶–µ–Ω–∞ —Å –ù–î–°
			{ wch: 12 }, // –°—É–º–º–∞ –±–µ–∑ –ù–î–°
			{ wch: 12 }, // –°—É–º–º–∞ —Å –ù–î–°
		];

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
		sheet['!cols'] = colWidths;

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
		if (!sheet['!merges']) sheet['!merges'] = [];
		sheet['!merges'].push(
			{ s: { r: 0, c: 0 }, e: { r: 0, c: 8 } }, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
			{ s: { r: 8, c: 0 }, e: { r: 8, c: 8 } }, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
		);

		// –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
		XLSX.utils.book_append_sheet(workbook, sheet, '–î–æ–∫—É–º–µ–Ω—Ç');

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
		XLSX.writeFile(workbook, filePath);
		console.log(`Excel file created: ${filePath}`);
	} catch (error) {
		console.error(`Error creating Excel file: ${error instanceof Error ? error.message : 'Unknown error'}`);
		throw new Error('Failed to create Excel file');
	}
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * –£–¥–∞–ª—è–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É
 */
function normalizeFileName(fileName: string): string {
	// –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
	let normalized = fileName
		// –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
		.replace(/[\\/:*?"<>|]/g, '_')
		// –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –æ–¥–Ω–∏–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
		.replace(/\s+/g, '_')
		.replace(/_+/g, '_');

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
	const MAX_PART_LENGTH = 30;

	// –°–æ–∫—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
	const parts = normalized.split('_');
	const shortenedParts = parts.map((part) => (part.length > MAX_PART_LENGTH ? part.substring(0, MAX_PART_LENGTH - 3) + '...' : part));

	// –ö–æ–Ω–µ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
	normalized = shortenedParts.join('_');
	if (normalized.length > 100) {
		normalized = normalized.substring(0, 97) + '...';
	}

	// –ï—Å–ª–∏ –∏–º—è —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
	return normalized || `file_${Date.now()}`;
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ EPERM –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –µ—â—ë –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
 */
function safeDeleteFile(filePath: string): void {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
		if (fs.existsSync(filePath)) {
			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–æ–º
			setTimeout(() => {
				try {
					fs.unlinkSync(filePath);
					console.log(`Cleaned up file: ${filePath}`);
				} catch (error) {
					console.warn(`Warning: Could not delete file ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`);
				}
			}, 500); // 500–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞
		} else {
			console.log(`File not found, skipping delete: ${filePath}`);
		}
	} catch (error) {
		console.warn(`Warning: Error checking file ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`);
	}
}

async function sendProcessingResult(chatId: number, result: ProcessingResult, originalFileName: string): Promise<void> {
	if (result.success && result.data) {
		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
		const invoiceNumber = result.data.invoice_number ? normalizeFileName(`‚Ññ ${result.data.invoice_number}`) : '';

		const invoiceDate = result.data.invoice_date ? normalizeFileName(` –≤—ñ–¥ ${result.data.invoice_date}`) : '';

		const supplier = result.data.supplier ? normalizeFileName(result.data.supplier) : 'unknown';

		// –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
		const originalBaseName = path.parse(originalFileName).name;
		const timestamp = Date.now();

		// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ + –¥–∞—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
		let baseName = '';
		if (invoiceNumber) {
			baseName = `${invoiceNumber}${invoiceDate}_${supplier}_${timestamp}`;
		} else {
			baseName = `${normalizeFileName(originalBaseName)}_${supplier}_${timestamp}`;
		}

		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
		baseName = normalizeFileName(baseName);

		const jsonFileName = `${baseName}.json`;
		const xlsxFileName = `${baseName}.xlsx`;
		const jsonFilePath = path.join(config.paths.uploads, jsonFileName);
		const xlsxFilePath = path.join(config.paths.uploads, xlsxFileName);

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª
		fs.writeFileSync(jsonFilePath, JSON.stringify(result.data, null, 2));

		// –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
		createExcelFile(result.data, xlsxFilePath);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
		const messageSummary =
			`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
			`üìã –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${result.data.supplier || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
			`üìÖ –î–∞—Ç–∞: ${result.data.invoice_date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
			`üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${result.data.items?.length || 0}` +
			`\n\nüîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ JSON –∏ Excel`;

		await bot.sendMessage(chatId, messageSummary);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Ñ–∞–π–ª
		await bot.sendDocument(chatId, jsonFilePath, {
			caption: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON',
		});

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
		await bot.sendDocument(chatId, xlsxFilePath, {
			caption: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel',
		});

		// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
		safeDeleteFile(jsonFilePath);
		safeDeleteFile(xlsxFilePath);
		console.log(`Successfully processed document for chat ${chatId}`);
	} else {
		const errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${result.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
		await bot.sendMessage(chatId, errorMessage);
		console.error(`Error processing document for chat ${chatId}: ${result.error}`);
	}
}

function setupHandlers(): void {
	bot.onText(/\/start/, (msg) => {
		const chatId = msg.chat.id;
		bot.sendMessage(
			chatId,
			`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—á–µ—Ç–∞ –∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ, –∏–∑–≤–ª–µ–∫–∞—è –∏–∑ –Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, Excel) –∏–ª–∏ —Ñ–æ—Ç–æ —Å—á–µ—Ç–∞, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.`,
		);
		console.log(`New user started bot: ${chatId}`);
	});

	bot.onText(/\/help/, (msg) => {
		const chatId = msg.chat.id;
		const helpMessage = `
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ (PDF, Excel) –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞/–Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª—é–±—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü.`;
		bot.sendMessage(chatId, helpMessage);
	});

	bot.on('document', async (msg) => {
		const chatId = msg.chat.id;
		const fileId = msg.document?.file_id;

		if (!fileId || !msg.document) {
			bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.');
			console.warn(`Invalid document received from chat ${chatId}`);
			return;
		}

		try {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
			const statusMessage = await bot.sendMessage(chatId, 'üì• –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');

			const file = await bot.getFile(fileId);
			const filePath = path.join(config.paths.uploads, msg.document.file_name || 'document');

			if (!file.file_path) {
				throw new Error('File path not found');
			}

			console.log(`Processing document from chat ${chatId}: ${msg.document.file_name}`);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
			await bot.editMessageText('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Download file
			await downloadFile(file.file_path, filePath);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–∏–±–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
			await bot.editMessageText('üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			console.log(`Processing document with flexible extraction for chat ${chatId}`);
			console.log(`File type: ${path.extname(filePath).toLowerCase()}`);

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≥–∏–±–∫–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
			const result = await processDocumentWithFlexibleExtraction(filePath, file.file_path);
			console.log(`Flexible processing completed for chat ${chatId}`);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–æ
			await bot.editMessageText('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Send result
			await sendProcessingResult(chatId, result, msg.document.file_name || 'document');

			// Clean up –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
			safeDeleteFile(filePath);
		} catch (error) {
			const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
			bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			console.error(`Error processing document from chat ${chatId}: ${errorMessage}`);
		}
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	bot.on('photo', async (msg) => {
		const chatId = msg.chat.id;
		const photos = msg.photo;

		if (!photos || photos.length === 0) {
			bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.');
			console.warn(`Invalid photo received from chat ${chatId}`);
			return;
		}

		try {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
			const statusMessage = await bot.sendMessage(chatId, 'üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');

			// –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
			const fileId = photos[photos.length - 1].file_id;
			const file = await bot.getFile(fileId);

			if (!file.file_path) {
				throw new Error('File path not found');
			}

			const fileName = `photo_${Date.now()}.jpg`;
			const filePath = path.join(config.paths.uploads, fileName);

			console.log(`Processing photo from chat ${chatId}`);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
			await bot.editMessageText('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ...', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Download file
			await downloadFile(file.file_path, filePath);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–∏–±–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
			await bot.editMessageText('üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			console.log(`Processing photo with flexible extraction from chat ${chatId}`);
			console.log(`File type: ${path.extname(filePath).toLowerCase()}`);

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≥–∏–±–∫–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
			const result = await processDocumentWithFlexibleExtraction(filePath, file.file_path);
			console.log(`Flexible processing completed for photo from chat ${chatId}`);

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –∑–∞–≤–µ—Ä—à–µ–Ω–æ
			await bot.editMessageText('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', {
				chat_id: chatId,
				message_id: statusMessage.message_id,
			});

			// Send result
			await sendProcessingResult(chatId, result, fileName);

			// Clean up –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
			safeDeleteFile(filePath);
		} catch (error) {
			const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
			bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
			console.error(`Error processing photo from chat ${chatId}: ${errorMessage}`);
		}
	});
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
 */
function stopBot(): void {
	if (bot && isRunning) {
		try {
			console.log('Stopping the Telegram bot...');
			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
			bot.stopPolling();
			isRunning = false;
			console.log('Telegram bot stopped successfully');
		} catch (error) {
			console.error('Error stopping bot:', error);
		}
	}
}

/**
 * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 */
function initializeBot(): void {
	try {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
		bot = new TelegramBot(config.telegram.token, { polling: true });

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
		bot.on('polling_error', (error) => {
			console.error('Telegram bot polling error:', error);

			// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
			if (error && typeof error === 'object' && 'code' in error && (error.code === 'ETELEGRAM' || error.code === 'EFATAL')) {
				console.log('Critical polling error detected, restarting bot...');
				restartBot();
			}
		});

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
		setupHandlers();

		isRunning = true;
		console.log('Telegram bot initialized with flexible processing mode only');
	} catch (error) {
		console.error('Failed to initialize bot:', error);
		throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
	}
}

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
 */
function restartBot(): void {
	restartAttempts++;
	console.log(`Attempting to restart bot (attempt ${restartAttempts}/${MAX_RESTART_ATTEMPTS})...`);

	if (restartAttempts > MAX_RESTART_ATTEMPTS) {
		console.error(`Maximum restart attempts (${MAX_RESTART_ATTEMPTS}) reached. Giving up.`);
		console.error('Bot requires manual intervention. Please check logs and restart the application.');
		return;
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	stopBot();

	// –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
	setTimeout(() => {
		try {
			console.log('Reinitializing bot...');
			initializeBot();

			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã
			setTimeout(() => {
				if (isRunning) {
					console.log('Bot has been stable for a while, resetting restart attempts counter.');
					restartAttempts = 0;
				}
			}, RESET_ATTEMPTS_AFTER);
		} catch (error) {
			console.error('Error during bot restart:', error);
			// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
			restartBot();
		}
	}, RESTART_COOLDOWN);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
 */
export function startBot(): void {
	try {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
		process.on('uncaughtException', (error) => {
			console.error('Uncaught exception:', error);
			if (isRunning) {
				console.log('Attempting to restart bot due to uncaught exception...');
				restartBot();
			}
		});

		process.on('unhandledRejection', (reason, promise) => {
			console.error('Unhandled promise rejection:', reason);
			if (isRunning) {
				console.log('Attempting to restart bot due to unhandled promise rejection...');
				restartBot();
			}
		});

		// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
		initializeBot();

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
		setInterval(() => {
			if (!isRunning) {
				console.log('Bot health check failed: Bot is not running. Attempting restart...');
				restartBot();
			} else {
				console.log('Bot health check: OK');
			}
		}, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
	} catch (error) {
		console.error('Failed to start bot:', error);
		restartBot();
	}
}
