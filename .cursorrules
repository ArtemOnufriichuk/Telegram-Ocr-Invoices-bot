# Cursor Rules для проекта Telegram OCR Invoices Bot

## Критические пути реализации
- Обработка запросов пользователей осуществляется через telegramBot.ts
- Анализ документов происходит через claudeService.ts
- Конфигурация системы хранится в config.ts с использованием переменных окружения

## Предпочтения и рабочий процесс
- Использовать TypeScript с явной типизацией для всех компонентов
- Следовать принципу модульности и разделения ответственности
- Обрабатывать ошибки на всех уровнях приложения
- Документировать все функции и методы с описанием параметров и возвращаемых значений

## Проектные паттерны
- Сервисный подход для разделения логики
- Использование интерфейсов для определения контрактов между компонентами
- Инъекция зависимостей через конфигурационный файл
- Асинхронная обработка запросов с использованием async/await

## Известные сложности
- Claude API имеет ограничения на количество запросов и размер обрабатываемых данных
- Обработка документов разного качества требует предварительной оптимизации
- Структурирование данных из нестандартных форматов документов

## Эволюция проектных решений
- Изначально планировалась только обработка изображений, теперь добавлены PDF и Excel
- Выбрана модель Claude 3.7 Sonnet для оптимального баланса между точностью и стоимостью

## Паттерны использования инструментов
- Разработка ведется в TypeScript с строгой типизацией
- Для управления переменными окружения используется dotenv
- Для работы с файлами используются fs и fs-extra
- Для логирования планируется использовать winston

## Специфические соглашения по коду
- Использовать camelCase для переменных и функций
- Использовать PascalCase для интерфейсов и типов
- Использовать snake_case для ключей в JSON-ответах
- Отступы: табуляция
- Размещать открывающую скобку на той же строке
- Использовать точку с запятой в конце выражений 